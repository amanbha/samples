// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
// ------------------------------------------------------------

namespace WebFront
{    
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.ServiceFabric.Services.Communication.Runtime;
    using Microsoft.AspNetCore.Hosting.Server.Features;
    using System.Threading;
    using Microsoft.AspNetCore.Hosting;
    using System.Fabric;
    using System.Fabric.Description;

    public class KestrelCommunicationListener : ICommunicationListener
    { 
        private readonly Func<string, KestrelCommunicationListener, IWebHost> build;
        private IWebHost webHost;
        private readonly ServiceContext serviceContext;
        private readonly string endpointName;

        /// <summary>
        /// The context of the service for which this communication listener is being constructed.
        /// </summary>
        public ServiceContext ServiceContext
        {
            get { return this.serviceContext; }
        }

        /// <summary>
        /// Constructs a AspNetCore Kestrel based communication listener.
        /// </summary>
        /// <param name="serviceContext">The context of the service for which this communication listener is being constructed.</param>
        /// <param name="endpointName">Name of endpoint resource defined in service manifest that should be used to create the address for listener.
        /// Protocol and port specified in this endpoint is used to create the url.
        /// If the endpointName is null, a default address with http protocol and port 0 will be used.
        /// Kestrel will dynamically bind to an unspecified, available port when port 0 is specified in url.
        /// If the specified endpointName is not found in service manifest, an InvalidOperationException indicating this will be thrown.</param>
        /// <param name="build">Delegate to build Microsoft.AspNetCore.Hosting.IWebHost, endpoint url generated by the listener is given as input to this delegate.
        /// This gives the flexibility to change the url before creating Microsoft.AspNetCore.Hosting.IWebHost if needed.</param>
        public KestrelCommunicationListener(ServiceContext serviceContext, string endpointName, Func<string, KestrelCommunicationListener, IWebHost> build)
        {
            if (endpointName != null && endpointName.Equals(string.Empty))
            {
                throw new ArgumentException("endpointNAme is empty string");
            }

            this.endpointName = endpointName;
            this.build = build;
            this.serviceContext = serviceContext;
        }
        /// <summary>
        /// This method causes the communication listener to close. Close is a terminal state and
        /// this method causes the transition to close ungracefully. Any outstanding operations
        /// (including close) should be canceled when this method is called.
        /// </summary>
        public void Abort()
        {
            if (this.webHost != null)
            {
                this.webHost.Dispose();
            }
        }

        /// <summary>
        /// This method causes the communication listener to close. Close is a terminal state and 
        /// this method allows the communication listener to transition to this state in a graceful manner.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>
        /// A <see cref="System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
        /// </returns>
        public Task CloseAsync(CancellationToken cancellationToken)
        {
            if (this.webHost != null)
            {
                this.webHost.Dispose();
            }

            return Task.FromResult(true);
        }

        /// <summary>
        /// This method causes the communication listener to be opened. Once the Open
        /// completes, the communication listener becomes usable - accepts and sends messages.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>
        /// A <see cref="System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
        /// is endpoint string on which IWebHost is listening.
        /// </returns>
        public Task<string> OpenAsync(CancellationToken cancellationToken)
        {
            this.webHost = this.build(this.GetListenerUrl(), this);

            if (this.webHost == null)
            {
                throw new InvalidOperationException("WebHost is null");
            }

            this.webHost.Start();

            // AspNetCore 1.x returns http://+:port
            // AspNetCore 2.0 returns http://[::]:port
            var url = this.webHost.ServerFeatures.Get<IServerAddressesFeature>().Addresses.FirstOrDefault();

            if (url == null)
            {
                throw new InvalidOperationException("No url returned from aspnet core");
            }

            var publishAddress = this.serviceContext.NodeContext.IPAddressOrFQDN;

            if (url.Contains("://+:"))
            {
                url = url.Replace("://+:", $"://{publishAddress}:");
            }
            else if (url.Contains("://[::]:"))
            {
                url = url.Replace("://[::]:", $"://{publishAddress}:");
            }

            return Task.FromResult(url.TrimEnd('/'));
        }

        /// <summary>
        /// Gets url for the listener. Listener url is created using the endpointName passed in the constructor.
        /// If the endpointName was null, a default url with http protocol and port zero is returned.
        /// </summary>
        /// <returns>url for the listener.</returns>
        private string GetListenerUrl()
        {
            // url with WebServer is always registered as http://+:port.
            var listenUrl = "http://+:0";

            // Get protocol and port from endpoint resource if specified.
            if (this.endpointName != null)
            {
                var serviceEndpoint = this.GetEndpointResourceDescription(this.endpointName);
                listenUrl = string.Format("{0}://+:{1}",
                    serviceEndpoint.Protocol.ToString().ToLower(), serviceEndpoint.Port);
            }

            return listenUrl;
        }

        /// <summary>
        /// Retrieves the endpoint resource with a given name from the service manifest.
        /// </summary>
        /// <param name="endpointName">The name of the endpoint.</param>
        /// <returns>The endpoint resource with the specified name.</returns>
        private EndpointResourceDescription GetEndpointResourceDescription(string endpointName)
        {
            if (endpointName == null)
            {
                throw new ArgumentNullException("endpointName");
            }

            if (!this.serviceContext.CodePackageActivationContext.GetEndpoints().Contains(endpointName))
            {
                throw new InvalidOperationException($"{endpointName} not found");
            }

            return this.serviceContext.CodePackageActivationContext.GetEndpoint(endpointName);
        }
    }
}
